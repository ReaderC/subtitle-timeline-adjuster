<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>字幕时间轴调整工具</title>
  <style>
    :root { --main-bg-color: #f9f9f9; --border-color: #ccc; --selected-color: #e0ffe0; --white-color: #fff; --dark-bg-color: #000; }
    html, body { height: 100%; margin: 0; font-family: Arial, sans-serif; overflow: hidden; }
    .main-container { display: flex; height: 100vh; padding: 10px; gap: 10px; box-sizing: border-box; }
    .left-panel, .right-panel { display: flex; flex-direction: column; gap: 10px; }
    .left-panel { flex: 2; min-width: 0; }
    .right-panel { flex: 3; min-width: 500px; }
    .section { border: 1px solid var(--border-color); padding: 15px; border-radius: 5px; background-color: var(--main-bg-color); display: flex; flex-direction: column; }
    .left-panel .section { flex-shrink: 0; }
    .left-panel .file-list-section { flex-grow: 1; min-height: 200px; }
    .right-panel .player-wrapper { flex: 2; min-height: 300px; overflow: hidden; }
    .right-panel .editor-wrapper { flex: 1; min-height: 200px; overflow: hidden; }
    .section h2, .list-header { display: flex; justify-content: space-between; align-items: center; margin-top: 0; font-size: 1.1em; flex-shrink: 0; }
    .file-list-wrapper { flex: 1; display: flex; flex-direction: column; min-width: 0; }
    .file-list { border: 1px solid #eee; padding: 8px; overflow-y: auto; background-color: var(--white-color); flex-grow: 1; }
    .file-list-item { display: flex; justify-content: space-between; align-items: center; padding: 5px; cursor: pointer; border-bottom: 1px solid #f0f0f0; }
    .file-list-item span { flex-grow: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .file-list-item .file-source { font-size: 0.8em; color: #888; margin-left: 8px; flex-shrink: 0; }
    .delete-btn, .step-btn, .speed-btn, .action-btn { border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; margin-left: 5px; font-size: 1em; }
    .delete-btn { background-color: #f44336; color: white; }
    .step-btn { background-color: #2196F3; color: white; font-weight: bold; }
    .speed-btn { background-color: #009688; color: white; }
    .action-btn { background-color: #4CAF50; color: white; }
    .file-list-item.active { background-color: var(--selected-color); font-weight: bold; }
    video { width: 100%; flex-grow: 1; background-color: var(--dark-bg-color); }
    #subtitleDisplay { width: 100%; box-sizing: border-box; background-color: rgba(0, 0, 0, 0.7); color: white; padding: 10px; text-align: center; min-height: 50px; margin-top: 5px; }
    .adjustment-controls { display: flex; align-items: center; flex-wrap: wrap; gap: 10px; margin-bottom: 10px; }
    /* Editor Styles */
    #subtitle-editor { flex-grow: 1; overflow-y: auto; border: 1px solid #eee; background: var(--white-color); font-family: monospace; }
    .editor-row { display: flex; align-items: center; border-bottom: 1px solid #f0f0f0; padding: 2px; }
    .editor-row > * { padding: 2px 4px; }
    .editor-index { flex-basis: 40px; flex-shrink: 0; }
    .editor-time-group { flex-basis: 150px; flex-shrink: 0; display: flex; align-items: center; }
    .editor-text { flex-grow: 1; }
    .editor-row input[type="text"] { width: 80px; border: 1px solid #ddd; padding: 2px; }
    .editor-row .time-adj-btn { font-size: 1em; line-height: 1; padding: 0 5px; margin: 0 2px; }
    /* Modal Styles */
    .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: none; justify-content: center; align-items: center; z-index: 1000; }
    .modal-content { background: var(--white-color); padding: 20px; border-radius: 5px; width: 80%; max-width: 800px; height: 80%; display: flex; flex-direction: column; }
    .modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; }
    .modal-body { flex-grow: 1; overflow-y: auto; border-top: 1px solid var(--border-color); border-bottom: 1px solid var(--border-color); }
    .modal-footer { margin-top: 15px; text-align: right; }
    .source-button { display: block; width: 100%; padding: 15px; margin-bottom: 10px; font-size: 1.2em; }
  </style>
</head>
<body>
  <div class="main-container">
    <div class="left-panel">
        <h1 style="flex-shrink: 0;">字幕时间轴调整工具</h1>
        <div class="section">
            <h2>服务器设置 (可选)</h2>
            <div class="adjustment-controls"><label for="serverTokenInput">访问 Token:</label><input type="password" id="serverTokenInput" placeholder="如果服务器设置了 Token" style="flex-grow: 1;"></div>
        </div>
        <div class="section file-list-section">
            <div class="list-header"><h2>媒体文件列表</h2><button class="action-btn" onclick="openAddFileModal()">添加文件</button></div>
            <div id="videoListWrapper" style="margin-top:10px;"><div class="list-header"><h4>视频</h4><button class="delete-btn" onclick="clearFileList('video')">清空</button></div><div id="videoList" class="file-list file-drop-area"></div></div>
            <div id="subtitleListWrapper" style="margin-top:10px;"><div class="list-header"><h4>字幕</h4><button class="delete-btn" onclick="clearFileList('subtitle')">清空</button></div><div id="subtitleList" class="file-list file-drop-area"></div></div>
            <div id="status" style="margin-top: 10px; flex-shrink: 0;"></div>
        </div>
    </div>
    <div class="right-panel">
        <div class="section player-wrapper">
            <h2>预览和处理</h2>
            <div class="adjustment-controls"><label>全局快捷微调:</label><button class="step-btn" onclick="stepAdjust(50, true)">« 延迟 50ms</button><button class="step-btn" onclick="stepAdjust(-50, true)">提前 50ms »</button><label for="playbackRateInput">播放速度:</label><input type="number" id="playbackRateInput" min="0.1" max="4" step="0.1" value="1.0" onchange="setPlaybackRate()" style="width: 60px;"><button class="speed-btn" onclick="setSpeed(0.5)">0.5x</button><button class="speed-btn" onclick="setSpeed(1.0)">1.0x</button></div>
            <div class="adjustment-controls"><button onclick="loadFilesToPlayer()">加载/重置预览</button><button onclick="saveAdjustedSubtitle()">保存字幕</button></div>
            <video id="videoPlayer" controls></video>
            <div id="subtitleDisplay"></div>
        </div>
        <div class="section editor-wrapper"><h2 id="editor-title">字幕编辑器 (请先加载字幕)</h2><div id="subtitle-editor"></div></div>
    </div>
  </div>

  <div id="addFileModal" class="modal-overlay"><div class="modal-content"><div class="modal-header"><h2 id="modalTitle">添加文件</h2><button onclick="closeModal()" style="font-size:1.5em;background:none;border:none;cursor:pointer;">&times;</button></div><div id="modalSourceSelection" class="modal-body"><button onclick="dom.fileUploader.click()" class="source-button">从本地上传</button><input type="file" id="fileUploader" style="display:none;" multiple/><button id="browseServerBtn" onclick="showServerBrowser()" class="source-button" disabled>从服务器浏览</button></div><div id="modalServerBrowser" class="modal-body" style="display:none;"><div class="list-header"><span id="current-path">/</span><button onclick="browseDirectory('')">返回根目录</button></div><div id="fileBrowser" class="file-browser"></div></div></div></div>

  <script>
    // --- State & DOM Elements ---
    let videoList = [], subtitleList = [], activeVideo = null, activeSubtitle = null, originalSubtitleData = null, activeSubtitleData = null, modalFileType = 'video';
    const dom = { videoPlayer: document.getElementById('videoPlayer'), statusEl: document.getElementById('status'), modal: document.getElementById('addFileModal'), modalTitle: document.getElementById('modalTitle'), modalSourceSelection: document.getElementById('modalSourceSelection'), modalServerBrowser: document.getElementById('modalServerBrowser'), fileUploader: document.getElementById('fileUploader'), fileBrowserEl: document.getElementById('fileBrowser'), currentPathEl: document.getElementById('current-path'), browseServerBtn: document.getElementById('browseServerBtn'), serverTokenInput: document.getElementById('serverTokenInput'), playbackRateInput: document.getElementById('playbackRateInput'), subtitleEditor: document.getElementById('subtitle-editor'), editorTitle: document.getElementById('editor-title') };

    // --- Modal & File Addition Logic ---
    function openAddFileModal() { dom.modal.style.display = 'flex'; dom.modalSourceSelection.style.display = 'block'; dom.modalServerBrowser.style.display = 'none'; }
    function closeModal() { dom.modal.style.display = 'none'; }
    function showServerBrowser() { dom.modalSourceSelection.style.display = 'none'; dom.modalServerBrowser.style.display = 'flex'; browseDirectory(); }
    dom.fileUploader.onchange = (e) => { addFiles(e.target.files, 'local'); };

    function addFiles(files, source, pathPrefix = '') {
        for (const file of files) {
            const fileType = file.type.startsWith('video/') || file.name.match(/\.(mp4|mkv|webm|mov)$/i) ? 'video' : (file.name.match(/\.(srt|ass)$/i) ? 'subtitle' : null);
            if (!fileType) continue;
            const targetList = fileType === 'video' ? videoList : subtitleList;
            const newItem = source === 'local' ? { source, file, name: file.name } : { source, path: pathPrefix ? `${pathPrefix}/${file.name}` : file.name, name: file.name };
            if (!targetList.some(item => item.name === newItem.name)) targetList.push(newItem);
        }
        renderFileList('video');
        renderFileList('subtitle');
        closeModal();
    }

    // --- Drag and Drop Logic ---
    function setupDragDrop() {
        ['videoList', 'subtitleList'].forEach(id => {
            const dropArea = document.getElementById(id);
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, e => { e.preventDefault(); e.stopPropagation(); }, false);
            });
            dropArea.addEventListener('drop', e => addFiles(e.dataTransfer.files, 'local'));
        });
    }

    // --- Server Browser Logic ---
    async function browseDirectory(path = '') {
        try {
            const response = await fetch(`/api/browse?path=${encodeURIComponent(path)}`, { headers: { 'X-Server-Token': dom.serverTokenInput.value } });
            if (!response.ok) throw new Error(`服务器错误: ${response.statusText}`);
            const data = await response.json();
            dom.currentPathEl.textContent = `/${data.path}`;
            renderServerBrowser(data.path, data.files);
        } catch (error) { dom.fileBrowserEl.innerHTML = `<p style="color: red;">无法加载目录: ${error.message}</p>`; }
    }

    function renderServerBrowser(currentServerPath, files) {
        dom.fileBrowserEl.innerHTML = '';
        if (currentServerPath) {
            const parentPath = currentServerPath.substring(0, currentServerPath.lastIndexOf('/'));
            const upEl = document.createElement('div');
            upEl.className = 'file-item';
            upEl.textContent = '⬆️ [返回上级]';
            upEl.onclick = () => browseDirectory(parentPath);
            dom.fileBrowserEl.appendChild(upEl);
        }
        files.forEach(file => {
            const itemEl = document.createElement('div');
            itemEl.className = 'file-item';
            itemEl.textContent = `${file.type === 'directory' ? 'ðŸ“‚' : 'ðŸ“„'} ${file.name}`;
            if (file.type === 'directory') {
                itemEl.onclick = () => browseDirectory(currentServerPath ? `${currentServerPath}/${file.name}` : file.name);
            } else {
                itemEl.onclick = () => addFiles([file], 'server', currentServerPath);
            }
            dom.fileBrowserEl.appendChild(itemEl);
        });
    }

    // --- File List Management ---
    function clearFileList(type) {
        const list = type === 'video' ? videoList : subtitleList;
        if (list.length > 0 && confirm(`确定要清空${type === 'video' ? '视频' : '字幕'}列表吗？`)) {
            if (type === 'video') { videoList = []; activeVideo = null; } 
            else { subtitleList = []; activeSubtitle = null; }
            renderFileList(type);
            updateStatus();
        }
    }

    function renderFileList(type) {
        const listId = type === 'video' ? 'videoList' : 'subtitleList';
        const list = type === 'video' ? videoList : subtitleList;
        const listEl = document.getElementById(listId);
        listEl.innerHTML = '';
        list.forEach((item, index) => {
            const itemEl = document.createElement('div');
            itemEl.className = 'file-list-item';
            if ((type === 'video' && item === activeVideo) || (type === 'subtitle' && item === activeSubtitle)) itemEl.classList.add('active');
            const nameSpan = document.createElement('span');
            nameSpan.textContent = item.name;
            nameSpan.onclick = () => { if (type === 'video') activeVideo = item; else activeSubtitle = item; renderFileList('video'); renderFileList('subtitle'); updateStatus(); };
            const sourceSpan = document.createElement('span');
            sourceSpan.className = 'file-source';
            sourceSpan.textContent = `(${item.source.toUpperCase()})`;
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'delete-btn';
            deleteBtn.textContent = '删除';
            deleteBtn.onclick = () => { list.splice(index, 1); if (type === 'video' && item === activeVideo) activeVideo = null; if (type === 'subtitle' && item === activeSubtitle) activeSubtitle = null; renderFileList(type); updateStatus(); };
            itemEl.appendChild(nameSpan); itemEl.appendChild(sourceSpan); itemEl.appendChild(deleteBtn);
            listEl.appendChild(itemEl);
        });
    }

    function updateStatus() {
        dom.statusEl.innerHTML = `<b>当前选择:</b> 视频 - <i>${activeVideo ? activeVideo.name : 'N/A'}</i> | 字幕 - <i>${activeSubtitle ? activeSubtitle.name : 'N/A'}</i>`;
    }

    // --- Player and Adjustment Actions ---
    async function loadFilesToPlayer() {
        if (!activeVideo) return alert('请在列表中选择一个视频文件');
        dom.videoPlayer.src = activeVideo.source === 'local' ? URL.createObjectURL(activeVideo.file) : `/api/stream?path=${encodeURIComponent(activeVideo.path)}&token=${dom.serverTokenInput.value}`;
        originalSubtitleData = activeSubtitleData = null;
        dom.subtitleEditor.innerHTML = '';
        dom.editorTitle.textContent = '字幕编辑器 (请先加载字幕)';
        if (activeSubtitle) {
            try {
                let text = activeSubtitle.source === 'local' ? await activeSubtitle.file.text() : await (await fetch(`/api/subtitle?path=${encodeURIComponent(activeSubtitle.path)}`, { headers: { 'X-Server-Token': dom.serverTokenInput.value } })).text();
                const parsedData = parseSubtitle(text, activeSubtitle.name);
                originalSubtitleData = JSON.parse(JSON.stringify(parsedData));
                activeSubtitleData = JSON.parse(JSON.stringify(parsedData));
                renderSubtitleEditor();
            } catch (e) { alert(`加载字幕失败: ${e.message}`); }
        }
        displaySubtitle(true);
    }

    async function saveAdjustedSubtitle() {
        if (!activeSubtitle || !activeSubtitleData) return alert('没有可保存的字幕');
        try {
            let fileContent;
            if (activeSubtitle.name.endsWith('.srt')) {
                fileContent = stringifySrt(activeSubtitleData);
            } else {
                const originalText = activeSubtitle.source === 'local' ? await activeSubtitle.file.text() : await (await fetch(`/api/subtitle?path=${encodeURIComponent(activeSubtitle.path)}`, { headers: { 'X-Server-Token': dom.serverTokenInput.value } })).text();
                fileContent = stringifyAss(originalText, activeSubtitleData);
            }
            dom.statusEl.textContent = '正在后台保存...';
            const res = await fetch(`/api/save?filename=${encodeURIComponent(activeSubtitle.name)}`, { method: 'POST', headers: { 'Content-Type': 'text/plain' }, body: fileContent });
            const data = await res.json();
            dom.statusEl.innerHTML = data.error ? `保存失败: ${data.error}` : `保存成功! <a href="${data.downloadLink}" download>点击下载</a>`;
        } catch (e) { dom.statusEl.textContent = `保存失败: ${e.message}`; }
    }

    // --- Editor and Time Logic ---
    function renderSubtitleEditor() {
        dom.subtitleEditor.innerHTML = '';
        dom.editorTitle.textContent = `正在编辑: ${activeSubtitle.name}`;
        activeSubtitleData.forEach((line, index) => {
            const row = document.createElement('div');
            row.className = 'editor-row';
            row.innerHTML = `
                <div class="editor-index">${line.id || index + 1}</div>
                <div class="editor-time-group"><button class="time-adj-btn" onclick="adjustLineTime(${index}, 'start', -0.05)">-</button><input type="text" value="${line.startTime}" onchange="updateLineTime(${index}, 'start', this.value)"><button class="time-adj-btn" onclick="adjustLineTime(${index}, 'start', 0.05)">+</button></div>
                <div class="editor-time-group"><button class="time-adj-btn" onclick="adjustLineTime(${index}, 'end', -0.05)">-</button><input type="text" value="${line.endTime}" onchange="updateLineTime(${index}, 'end', this.value)"><button class="time-adj-btn" onclick="adjustLineTime(${index}, 'end', 0.05)">+</button></div>
                <div class="editor-text">${line.text}</div>
            `;
            dom.subtitleEditor.appendChild(row);
        });
    }

    function updateLineTime(index, part, value) {
        const isSrt = activeSubtitle.name.endsWith('.srt');
        let timeInSeconds = isSrt ? srtTimeToSeconds(value) : timeToSeconds(value);
        if (isNaN(timeInSeconds)) { alert('时间格式无效'); renderSubtitleEditor(); return; }
        activeSubtitleData[index][part] = isSrt ? secondsToSrtTime(timeInSeconds) : secondsToTime(timeInSeconds);
        displaySubtitle(true);
    }

    function adjustLineTime(index, part, amountInSeconds) {
        const isSrt = activeSubtitle.name.endsWith('.srt');
        const originalTime = activeSubtitleData[index][part];
        let timeInSeconds = isSrt ? srtTimeToSeconds(originalTime) : timeToSeconds(originalTime);
        timeInSeconds += amountInSeconds;
        if (timeInSeconds < 0) timeInSeconds = 0;
        activeSubtitleData[index][part] = isSrt ? secondsToSrtTime(timeInSeconds) : secondsToTime(timeInSeconds);
        renderSubtitleEditor();
        displaySubtitle(true);
    }
    
    function stepAdjust(amountInMs, isGlobal) {
        if (!activeSubtitleData) return alert('请先加载字幕');
        const amountInSeconds = amountInMs / 1000;
        const isSrt = activeSubtitle.name.endsWith('.srt');
        activeSubtitleData.forEach(line => {
            let start = isSrt ? srtTimeToSeconds(line.startTime) : timeToSeconds(line.startTime);
            let end = isSrt ? srtTimeToSeconds(line.endTime) : timeToSeconds(line.endTime);
            start += amountInSeconds; end += amountInSeconds;
            line.startTime = isSrt ? secondsToSrtTime(start) : secondsToTime(start);
            line.endTime = isSrt ? secondsToSrtTime(end) : secondsToTime(end);
        });
        renderSubtitleEditor();
        displaySubtitle(true);
    }

    // --- Stringify and Time Conversion ---
    function stringifySrt(data) { return data.map(line => `${line.id}\n${line.startTime} --> ${line.endTime}\n${line.text}`).join('\n\n') + '\n\n'; }
    function stringifyAss(originalContent, data) {
        let eventIndex = 0;
        return originalContent.split('\n').map(line => {
            if (line.startsWith('Dialogue:') || line.startsWith('Comment:')) {
                if (eventIndex < data.length) {
                    const parts = line.split(',');
                    parts[1] = data[eventIndex].startTime;
                    parts[2] = data[eventIndex].endTime;
                    eventIndex++;
                    return parts.join(',');
                }
            }
            return line;
        }).join('\n');
    }
    function secondsToSrtTime(s){const h=Math.floor(s/3600);s%=3600;const m=Math.floor(s/60);s%=60;const c=Math.floor(s);const f=Math.round((s-c)*1000);return`${String(h).padStart(2,'0')}:${String(m).padStart(2,'0')}:${String(c).padStart(2,'0')},${String(f).padStart(3,'0')}`}
    function srtTimeToSeconds(t){const p=t.split(/[:,]/);return 3600*parseInt(p[0],10)+60*parseInt(p[1],10)+parseInt(p[2],10)+parseInt(p[3],10)/1000}
    function timeToSeconds(t){const p=t.split(':');return 3600*parseInt(p[0],10)+60*parseInt(p[1],10)+parseFloat(p[2])}
    function secondsToTime(s){if(s<0)s=0;const h=Math.floor(s/3600);s%=3600;const m=Math.floor(s/60);s%=60;const c=Math.floor(s);const f=Math.round((s-c)*100);return`${h}:${String(m).padStart(2,'0')}:${String(c).padStart(2,'0')}.${String(f).padStart(2,'0')}`}
    function setPlaybackRate() { dom.videoPlayer.playbackRate = parseFloat(dom.playbackRateInput.value) || 1; }
    function setSpeed(rate) { dom.playbackRateInput.value = rate; setPlaybackRate(); }
    let animationFrameId = null;
    function displaySubtitle(forceUpdate = false) {
      if (!forceUpdate && animationFrameId) cancelAnimationFrame(animationFrameId);
      const currentTime = dom.videoPlayer.currentTime;
      let currentSubtitle = '';
      if (activeSubtitleData) { for (const subtitle of activeSubtitleData) { if (currentTime >= subtitle.start && currentTime <= subtitle.end) { currentSubtitle = subtitle.text; break; } } }
      document.getElementById('subtitleDisplay').textContent = currentSubtitle;
      if (!dom.videoPlayer.paused) animationFrameId = requestAnimationFrame(() => displaySubtitle(false));
    }
    dom.videoPlayer.addEventListener('play', () => displaySubtitle(false));
    dom.videoPlayer.addEventListener('seeking', () => displaySubtitle(true));
    dom.videoPlayer.addEventListener('pause', () => cancelAnimationFrame(animationFrameId));

    // --- Initial Load ---
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            const response = await fetch('/api/status');
            const data = await response.json();
            if (data.isServerFsEnabled) {
                dom.browseServerBtn.disabled = false;
                dom.browseServerBtn.title = '浏览服务器上的文件';
            } else {
                dom.browseServerBtn.title = '服务器未配置媒体目录';
            }
        } catch (e) { dom.browseServerBtn.title = '无法连接到服务器'; }
        setupDragDrop();
        updateStatus();
    });

    // --- PARSING LOGIC ---
    function parseSubtitle(content, fileName) { 
        if (fileName.endsWith('.ass') || fileName.endsWith('.ssa')) return parseASSSubtitle(content); 
        if (fileName.endsWith('.srt')) return parseSRTSubtitle(content);
        return [];
    }

    function parseASSSubtitle(content) {
        const subtitles = [];
        let isInEvents = false;
        const lines = content.split('\n');
        for (const line of lines) {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('[Events]')) { isInEvents = true; continue; }
            if (isInEvents && trimmedLine.startsWith('[')) break;
            if (isInEvents && trimmedLine.startsWith('Dialogue:')) {
                const parts = trimmedLine.split(',');
                if (parts.length >= 10) {
                    subtitles.push({
                        startTime: parts[1],
                        endTime: parts[2],
                        text: parts.slice(9).join(',').replace(/\\N/g, '\n').replace(/\{.*?\}/g, '')
                    });
                }
            }
        }
        return subtitles;
    }

    function parseSRTSubtitle(content) {
        return content.split('\n\n').map(block => {
            const lines = block.trim().split('\n');
            if (lines.length >= 2) {
                const timeParts = lines[1].split(' --> ');
                if (timeParts.length === 2) {
                    return {
                        id: lines[0],
                        startTime: timeParts[0],
                        endTime: timeParts[1],
                        text: lines.slice(2).join('\n')
                    };
                }
            }
            return null;
        }).filter(Boolean);
    }

  </script>
</body>
</html>